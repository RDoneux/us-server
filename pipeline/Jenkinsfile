pipeline {

    agent any

    environment {
        PORT=4000
        DOCKER_IMAGE = 'rdoneux/us'
        RAILWAY_TOKEN = credentials("US_RAILWAY_TOKEN")
    }

    stages {
        stage("Setup") {
            steps {
                sh "npm i"
            }
            post {
                success {
                    echo "Setup success"
                }
                failure {
                    echo "Setup failure"
                }
            }
        }

        stage("Build") {
            steps {
                sh "npm run build"
            }
            post {
                success {
                    echo "Build success"
                }
                failure {
                    echo "Build failure"
                }
            }
        }

        stage("Quality Gate: Static Analysis") {
            steps {
                sh "npm run lint:ci"
                sh "npm run prettier:ci"
            }
            post {
                success {
                    echo "Static Analysis success"
                }
                failure {
                    echo "Static Analysis failure"
                }
            }
        }

        stage("Quality Gate: Unit Test"){
             steps {
                sh "npm run test:ci"
             }
             post {
                always {
                    junit 'dist/junit/junit.xml'
                }
                success {
                    echo "Unit test success"
                }
                failure {
                    echo "Unit test failure"
                }
             }
        }

        stage ("Report") {
            steps {
                clover(cloverReportDir: '../dist/coverage', cloverReportFileName: 'clover.xml',
                  healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                  unhealthyTarget: [methodCoverage: 50, conditionalCoverage: 50, statementCoverage: 50],
                  failingTarget: [methodCoverage: 25, conditionalCoverage: 25, statementCoverage: 25]
                )
                junit 'dist/junit/junit.xml'
            }
            post {
                success {
                    echo "Repot success"
                }
                failure {
                    echo "Report failure"
                }
            }
        }

        stage ("Publish to Docker Hub") {
            when {
                branch 'master'
            }
            steps {
                sh "docker build -t $DOCKER_IMAGE:us-server ." 
                withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'echo $PASSWORD | docker login -u $USERNAME --password-stdin'
                    sh 'docker push $DOCKER_IMAGE:us-server'
                }
            }
            post {
               always {
                    sh 'docker rmi $DOCKER_IMAGE:tplt-node-server || true'
               } 
            }
        }

        stage ("Deploy") {
            when {
                branch 'master'
            }
            steps {
                script {
                    sh 'npm i @railway/cli'
                    env.PATH = "${env.WORKSPACE}/node_modules/.bin:${env.PATH}"
                    sh 'railway up --detach --service us-server'
                }
            }

        }
    }

}
